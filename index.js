// Generated by CoffeeScript 1.12.7
(function() {
  var Base, alphabets, base, j, len, ref,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  alphabets = {};

  ref = ['01', '01234567', '0123456789', '0123456789abcdef', '0123456789ABCDEFGHJKMNPQRSTVWXYZ', '0123456789abcdefghijklmnopqrstuvwxyz', '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz', '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.!~'];
  for (j = 0, len = ref.length; j < len; j++) {
    base = ref[j];
    alphabets[base.length] = base;
  }

  Base = (function() {
    function Base(alphabet) {
      var c, i, k, len1, ref1;
      if (alphabet == null) {
        alphabet = 62;
      }
      if (typeof alphabet === 'number' && alphabet in alphabets) {
        this.alphabet = alphabets[alphabet];
      } else {
        this.alphabet = alphabet;
      }
      this.base = this.alphabet.length;
      this.reverse = new Map();
      ref1 = this.alphabet;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        c = ref1[i];
        this.reverse.set(c, i);
      }
    }

    Base.prototype.encode = function(n) {
      var u, v;
      v = [];
      while (n > this.base) {
        u = modulo(n, this.base);
        v.unshift(this.alphabet[u]);
        n = Math.floor(n / this.base);
      }
      v.unshift(this.alphabet[n]);
      return v.join('');
    };

    Base.prototype.decode = function(t) {
      var c, k, len1, u, v;
      v = 0;
      for (k = 0, len1 = t.length; k < len1; k++) {
        c = t[k];
        if (!this.reverse.has(c)) {
          throw new Error("Invalid character `" + c + "`");
        }
        u = this.reverse.get(c);
        v *= this.base;
        v += u;
      }
      return v;
    };

    return Base;

  })();

  module.exports = Base;

}).call(this);
